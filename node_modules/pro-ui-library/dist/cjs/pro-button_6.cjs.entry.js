'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const __chunk_1 = require('./chunk-4c2d6ff3.js');

class ProButton {
    constructor(hostRef) {
        __chunk_1.registerInstance(this, hostRef);
        this.type = 'button';
        this.disabled = false;
        this.handleClick = (ev) => {
            const form = this.el.closest('form');
            if (form) {
                ev.preventDefault();
                const fakeButton = document.createElement('button');
                fakeButton.type = this.type;
                fakeButton.style.display = 'none';
                form.appendChild(fakeButton);
                fakeButton.click();
                fakeButton.remove();
            }
        };
    }
    render() {
        return (__chunk_1.h("button", { class: "button-native", disabled: this.disabled, type: this.type, onClick: this.handleClick }, __chunk_1.h("span", { class: "button-inner" }, __chunk_1.h("slot", { name: "icon-only" }), __chunk_1.h("slot", { name: "start" }), __chunk_1.h("slot", null), __chunk_1.h("slot", { name: "end" }))));
    }
    get el() { return __chunk_1.getElement(this); }
    static get style() { return "\@import url(\"https://fonts.googleapis.com/css?family=Raleway&display=swap\");h1,h2,h3,h4,h5,h6{font-weight:500;line-height:1.2}h1{font-size:30px}h2{font-size:28px}h3{font-size:26px}h4{font-size:24px}h5{font-size:22px}h6{font-size:18px}p{font-size:16px}.good-weather{background:#fcd581;background-image:-webkit-gradient(linear,left bottom,left top,from(#fcd581),color-stop(65%,#fdfffc));background-image:linear-gradient(0deg,#fcd581,#fdfffc 65%);background-repeat:no-repeat;background-attachment:fixed;height:100%;color:#0a0908}.bad-weather{background:#0a0908;background:-webkit-gradient(linear,left bottom,left top,from(#0a0908),color-stop(65%,#263a3c));background:linear-gradient(0deg,#0a0908,#263a3c 65%);background-repeat:no-repeat;background-attachment:fixed;height:100%;color:#fdfffc}html{font-family:Raleway,Helvetica,sans-serif;font-size:100%;background-color:#fdfffc;color:#0a0908}#body,html{height:100%;width:100%}#body{background-repeat:no-repeat;background-attachment:fixed}:host{width:100%}\@media only screen and (max-width:600px){pro-modal{width:50%;height:50%}}:host .button-native{background-color:#263a3c;padding:5px;border-radius:10%;padding-top:10px;border-radius:5px;color:#fdfffc;font-family:Raleway,Helvetica,sans-serif;font-size:14px;text-transform:uppercase;width:100%;min-height:35px;max-height:70px;-webkit-transition:.5s;transition:.5s;cursor:pointer}:host .button-inner{font-weight:700}:host button:disabled{background-color:grey;color:#fff;cursor:auto;font-size:14px}:host :hover{background-color:#bdeaf9;color:#263a3c;-webkit-transition:.5s;transition:.5s;font-size:16px}:host :focus{outline:none;-webkit-box-shadow:0 1px 3px #b7b7b7;box-shadow:0 1px 3px #b7b7b7}\@media only screen and (max-width:500px){:host .button-native{font-size:10px}:host :hover{font-size:12px}:host button:disabled{font-size:10px}}"; }
}

class ProCheckbox {
    constructor(hostRef) {
        __chunk_1.registerInstance(this, hostRef);
        this.disabled = false;
        this.checked = false;
        this.onClick = () => {
            this.checked = !this.checked;
        };
        this.proChange = __chunk_1.createEvent(this, "proChange", 7);
        this.proStyle = __chunk_1.createEvent(this, "proStyle", 7);
    }
    componentWillLoad() {
        this.emitStyle();
    }
    checkedChanged(isChecked) {
        this.proChange.emit({
            checked: isChecked,
            value: this.value
        });
        this.emitStyle();
    }
    disabledChanged() {
        this.emitStyle();
    }
    emitStyle() {
        this.proStyle.emit({
            'checkbox-checked': this.checked,
            'interactive-disabled': this.disabled,
            'checkbox-value': this.value
        });
    }
    render() {
        return __chunk_1.h("input", { type: "checkbox", onClick: this.onClick });
    }
    get el() { return __chunk_1.getElement(this); }
    static get watchers() { return {
        "checked": ["checkedChanged"],
        "disabled": ["disabledChanged"]
    }; }
    static get style() { return "\@charset \"UTF-8\";\@import url(\"https://fonts.googleapis.com/css?family=Raleway&display=swap\");h1,h2,h3,h4,h5,h6{font-weight:500;line-height:1.2}h1{font-size:30px}h2{font-size:28px}h3{font-size:26px}h4{font-size:24px}h5{font-size:22px}h6{font-size:18px}p{font-size:16px}.good-weather{background:#fcd581;background-image:-webkit-gradient(linear,left bottom,left top,from(#fcd581),color-stop(65%,#fdfffc));background-image:linear-gradient(0deg,#fcd581,#fdfffc 65%);background-repeat:no-repeat;background-attachment:fixed;height:100%;color:#0a0908}.bad-weather{background:#0a0908;background:-webkit-gradient(linear,left bottom,left top,from(#0a0908),color-stop(65%,#263a3c));background:linear-gradient(0deg,#0a0908,#263a3c 65%);background-repeat:no-repeat;background-attachment:fixed;height:100%;color:#fdfffc}html{font-family:Raleway,Helvetica,sans-serif;font-size:100%;background-color:#fdfffc;color:#0a0908}#body,html{height:100%;width:100%}#body{background-repeat:no-repeat;background-attachment:fixed}:host{width:100%}\@media only screen and (max-width:600px){pro-modal{width:50%;height:50%}}input[type=checkbox]:after{background-color:#dcdcdc;content:\"\"}input[type=checkbox]:after,input[type=checkbox]:checked:after{width:15px;height:15px;border-radius:2px;top:-2px;left:-1px;position:relative;display:inline-block;visibility:visible;border:2px solid #fff}input[type=checkbox]:checked:after{content:\"âœ”\";color:#30bced;text-align:center}input[type=checkbox]:hover:after{background:#1e96ff;-webkit-transition:1s;transition:1s}"; }
}

class ProInput {
    constructor(hostRef) {
        __chunk_1.registerInstance(this, hostRef);
        this.regex = /^(.+)$/;
        this.required = false;
        this.inputChange = __chunk_1.createEvent(this, "inputChange", 7);
    }
    componentWillLoad() {
        if (this.required) {
            this.reqLabel = 'required';
        }
    }
    onInputChange(ev) {
        const value = ev.target.value;
        let validated = false;
        if (value != '') {
            (this.required) ? validated = this.regex.test(value) : validated = true;
            validated ? this.class = 'valid' : this.class = 'invalid';
        }
        else {
            validated = !this.required;
            validated ? this.class = '' : this.class = 'invalid';
        }
        this.inputChange.emit({
            name: this.label,
            value: value,
            valid: validated
        });
    }
    render() {
        return (__chunk_1.h(__chunk_1.Host, null, __chunk_1.h("label", { htmlFor: this.label, class: this.reqLabel }, this.label), __chunk_1.h("input", { onChange: (ev) => this.onInputChange(ev), name: this.label, placeholder: this.placeholder, id: this.label, class: this.class })));
    }
    static get style() { return "\@import url(\"https://fonts.googleapis.com/css?family=Raleway&display=swap\");h1,h2,h3,h4,h5,h6{font-weight:500;line-height:1.2}h1{font-size:30px}h2{font-size:28px}h3{font-size:26px}h4{font-size:24px}h5{font-size:22px}h6{font-size:18px}p{font-size:16px}.good-weather{background:#fcd581;background-image:-webkit-gradient(linear,left bottom,left top,from(#fcd581),color-stop(65%,#fdfffc));background-image:linear-gradient(0deg,#fcd581,#fdfffc 65%);background-repeat:no-repeat;background-attachment:fixed;height:100%;color:#0a0908}.bad-weather{background:#0a0908;background:-webkit-gradient(linear,left bottom,left top,from(#0a0908),color-stop(65%,#263a3c));background:linear-gradient(0deg,#0a0908,#263a3c 65%);background-repeat:no-repeat;background-attachment:fixed;height:100%;color:#fdfffc}html{font-family:Raleway,Helvetica,sans-serif;font-size:100%;background-color:#fdfffc;color:#0a0908}#body,html{height:100%;width:100%}#body{background-repeat:no-repeat;background-attachment:fixed}:host{width:100%}\@media only screen and (max-width:600px){pro-modal{width:50%;height:50%}}:host{overflow:hidden}:host input{width:100%;height:20px;border-radius:5px;font-family:Raleway,Helvetica,sans-serif;padding-left:5px;margin-top:2px}:host label{width:100%;font-size:10px;font-style:italic;margin-bottom:40px}:host label.required{border-bottom:1px dotted rgba(240,0,0,.3)}:host input:focus{background-color:#bdeaf9;outline:none}:host input:hover{background-color:#bdeaf9;-webkit-transition:1s;transition:1s}:host input.valid{background-color:#c4d2c1}:host input.invalid{background-color:#e09a9f}"; }
}

class ProList {
    constructor(hostRef) {
        __chunk_1.registerInstance(this, hostRef);
    }
    render() {
        return __chunk_1.h("slot", null);
    }
    static get style() { return ""; }
}

class ProRadio {
    constructor(hostRef) {
        __chunk_1.registerInstance(this, hostRef);
        this.name = 'default-radio-name';
        this.disabled = false;
        this.checked = false;
        this.onClick = () => {
            if (this.checked) {
                this.proDeselect.emit();
            }
            else {
                this.checked = true;
            }
        };
        this.proRadioDidLoad = __chunk_1.createEvent(this, "proRadioDidLoad", 7);
        this.proRadioDidUnload = __chunk_1.createEvent(this, "proRadioDidUnload", 7);
        this.proSelect = __chunk_1.createEvent(this, "proSelect", 7);
        this.proDeselect = __chunk_1.createEvent(this, "proDeselect", 7);
        this.proStyle = __chunk_1.createEvent(this, "proStyle", 7);
    }
    nameChanged() {
        this.emitStyle();
    }
    checkedChanged(isChecked) {
        if (isChecked) {
            this.proSelect.emit({
                checked: true,
                value: this.value
            });
        }
        this.emitStyle();
    }
    disabledChanged() {
        this.emitStyle();
    }
    componentWillLoad() {
        this.emitStyle();
    }
    componentDidLoad() {
        this.proRadioDidLoad.emit();
    }
    componentDidUnload() {
        this.proRadioDidUnload.emit();
    }
    emitStyle() {
        this.proStyle.emit({
            'radio-checked': this.checked,
            'interactive-disabled': this.disabled,
            'radio-value': this.value
        });
    }
    /* <Host
                    onClick={this.onClick}
                    role="radio"
                    class={{
                        'radio-checked': this.checked,
                        'radio-disabled': this.disabled
                    }}
                >
                    <div class="radio-icon">
                        <div class="radio-inner" />
                    </div>
                    <button
                        type="button"
                        disabled={this.disabled}
                    >
                    </button>
                </Host> */
    render() {
        return (__chunk_1.h("input", { type: "radio", onClick: this.onClick, name: this.name, value: this.value, checked: this.checked }));
    }
    get el() { return __chunk_1.getElement(this); }
    static get watchers() { return {
        "name": ["nameChanged"],
        "checked": ["checkedChanged"],
        "disabled": ["disabledChanged"]
    }; }
    static get style() { return "\@import url(\"https://fonts.googleapis.com/css?family=Raleway&display=swap\");h1,h2,h3,h4,h5,h6{font-weight:500;line-height:1.2}h1{font-size:30px}h2{font-size:28px}h3{font-size:26px}h4{font-size:24px}h5{font-size:22px}h6{font-size:18px}p{font-size:16px}.good-weather{background:#fcd581;background-image:-webkit-gradient(linear,left bottom,left top,from(#fcd581),color-stop(65%,#fdfffc));background-image:linear-gradient(0deg,#fcd581,#fdfffc 65%);background-repeat:no-repeat;background-attachment:fixed;height:100%;color:#0a0908}.bad-weather{background:#0a0908;background:-webkit-gradient(linear,left bottom,left top,from(#0a0908),color-stop(65%,#263a3c));background:linear-gradient(0deg,#0a0908,#263a3c 65%);background-repeat:no-repeat;background-attachment:fixed;height:100%;color:#fdfffc}html{font-family:Raleway,Helvetica,sans-serif;font-size:100%;background-color:#fdfffc;color:#0a0908}#body,html{height:100%;width:100%}#body{background-repeat:no-repeat;background-attachment:fixed}:host{width:100%}\@media only screen and (max-width:600px){pro-modal{width:50%;height:50%}}input[type=radio]:after{background-color:#b7b7b7}input[type=radio]:after,input[type=radio]:checked:after{width:15px;height:15px;border-radius:15px;top:-2px;left:-1px;position:relative;content:\"\";display:inline-block;visibility:visible;border:2px solid #fff}input[type=radio]:checked:after{background-color:#30bced}input[type=radio]:hover:after{background:#1e96ff;-webkit-transition:.5s;transition:.5s}"; }
}

class ProRadioGroup {
    constructor(hostRef) {
        __chunk_1.registerInstance(this, hostRef);
        this.selects = [];
    }
    onRadioDidLoad(ev) {
        const select = ev.target;
        select.name = this.name;
        this.selects.push(select);
        this.updateRadios();
    }
    onRadioDidUnload(ev) {
        const index = this.selects.indexOf(ev.target);
        if (index > -1) {
            this.selects.splice(index, 1);
        }
    }
    onSelect(ev) {
        const selectedRadio = ev.target;
        if (selectedRadio) {
            selectedRadio.checked = true;
            this.value = selectedRadio.value;
        }
        this.updateRadios();
    }
    onDeselect(ev) {
        const selectedRadio = ev.target;
        if (selectedRadio) {
            selectedRadio.checked = false;
            this.value = undefined;
        }
        this.updateRadios();
    }
    componentDidLoad() {
        this.updateRadios();
    }
    updateRadios() {
        const value = this.value;
        let hasChecked = false;
        for (const select of this.selects) {
            if (!hasChecked && select.value === value) {
                hasChecked = true;
                select.checked = true;
            }
            else {
                select.checked = false;
            }
        }
    }
    render() {
        return __chunk_1.h("slot", null);
    }
    get el() { return __chunk_1.getElement(this); }
    static get style() { return ""; }
}

exports.pro_button = ProButton;
exports.pro_checkbox = ProCheckbox;
exports.pro_input = ProInput;
exports.pro_list = ProList;
exports.pro_radio = ProRadio;
exports.pro_radio_group = ProRadioGroup;
