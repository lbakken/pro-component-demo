var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
System.register(['./chunk-5603b3cb.system.js', './chunk-05185aad.system.js'], function (exports, module) {
    'use strict';
    var registerInstance, createEvent, getIonMode, h, getElement, Host, rIC;
    return {
        setters: [function (module) {
                registerInstance = module.r;
                createEvent = module.d;
                getIonMode = module.f;
                h = module.h;
                getElement = module.c;
                Host = module.H;
            }, function (module) {
                rIC = module.r;
            }],
        execute: function () {
            /**
             * @virtualProp {"ios" | "md"} mode - The mode determines which platform styles to use.
             */
            var Slides = /** @class */ (function () {
                function Slides(hostRef) {
                    var _this = this;
                    registerInstance(this, hostRef);
                    this.didInit = false;
                    this.swiper = new Promise(function (resolve) { _this.readySwiper = resolve; });
                    /**
                     * Options to pass to the swiper instance.
                     * See http://idangero.us/swiper/api/ for valid options
                     */
                    this.options = {}; // SwiperOptions;  // TODO
                    /**
                     * If `true`, show the pagination.
                     */
                    this.pager = false;
                    /**
                     * If `true`, show the scrollbar.
                     */
                    this.scrollbar = false;
                    this.ionSlidesDidLoad = createEvent(this, "ionSlidesDidLoad", 7);
                    this.ionSlideTap = createEvent(this, "ionSlideTap", 7);
                    this.ionSlideDoubleTap = createEvent(this, "ionSlideDoubleTap", 7);
                    this.ionSlideWillChange = createEvent(this, "ionSlideWillChange", 7);
                    this.ionSlideDidChange = createEvent(this, "ionSlideDidChange", 7);
                    this.ionSlideNextStart = createEvent(this, "ionSlideNextStart", 7);
                    this.ionSlidePrevStart = createEvent(this, "ionSlidePrevStart", 7);
                    this.ionSlideNextEnd = createEvent(this, "ionSlideNextEnd", 7);
                    this.ionSlidePrevEnd = createEvent(this, "ionSlidePrevEnd", 7);
                    this.ionSlideTransitionStart = createEvent(this, "ionSlideTransitionStart", 7);
                    this.ionSlideTransitionEnd = createEvent(this, "ionSlideTransitionEnd", 7);
                    this.ionSlideDrag = createEvent(this, "ionSlideDrag", 7);
                    this.ionSlideReachStart = createEvent(this, "ionSlideReachStart", 7);
                    this.ionSlideReachEnd = createEvent(this, "ionSlideReachEnd", 7);
                    this.ionSlideTouchStart = createEvent(this, "ionSlideTouchStart", 7);
                    this.ionSlideTouchEnd = createEvent(this, "ionSlideTouchEnd", 7);
                }
                Slides.prototype.optionsChanged = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!this.didInit) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    Object.assign(swiper.params, this.options);
                                    return [4 /*yield*/, this.update()];
                                case 2:
                                    _a.sent();
                                    _a.label = 3;
                                case 3: return [2 /*return*/];
                            }
                        });
                    });
                };
                Slides.prototype.componentDidLoad = function () {
                    var _this = this;
                    rIC(function () { return _this.initSwiper(); });
                };
                Slides.prototype.componentDidUnload = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    swiper.destroy(true, true);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                Slides.prototype.onSlideChanged = function () {
                    if (this.didInit) {
                        this.update();
                    }
                };
                /**
                 * Update the underlying slider implementation. Call this if you've added or removed
                 * child slides.
                 */
                Slides.prototype.update = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    swiper.update();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Force swiper to update its height (when autoHeight is enabled) for the duration
                 * equal to 'speed' parameter.
                 *
                 * @param speed The transition duration (in ms).
                 */
                Slides.prototype.updateAutoHeight = function (speed) {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    swiper.updateAutoHeight(speed);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Transition to the specified slide.
                 *
                 * @param index The index of the slide to transition to.
                 * @param speed The transition duration (in ms).
                 * @param runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events.
                 */
                Slides.prototype.slideTo = function (index, speed, runCallbacks) {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    swiper.slideTo(index, speed, runCallbacks);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Transition to the next slide.
                 *
                 * @param speed The transition duration (in ms).
                 * @param runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events.
                 */
                Slides.prototype.slideNext = function (speed, runCallbacks) {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    swiper.slideNext(speed, runCallbacks);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Transition to the previous slide.
                 *
                 * @param speed The transition duration (in ms).
                 * @param runCallbacks If true, the transition will produce the [Transition/SlideChange][Start/End] transition events.
                 */
                Slides.prototype.slidePrev = function (speed, runCallbacks) {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    swiper.slidePrev(speed, runCallbacks);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Get the index of the active slide.
                 */
                Slides.prototype.getActiveIndex = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    return [2 /*return*/, swiper.activeIndex];
                            }
                        });
                    });
                };
                /**
                 * Get the index of the previous slide.
                 */
                Slides.prototype.getPreviousIndex = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    return [2 /*return*/, swiper.previousIndex];
                            }
                        });
                    });
                };
                /**
                 * Get the total number of slides.
                 */
                Slides.prototype.length = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    return [2 /*return*/, swiper.slides.length];
                            }
                        });
                    });
                };
                /**
                 * Get whether or not the current slide is the last slide.
                 */
                Slides.prototype.isEnd = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    return [2 /*return*/, swiper.isEnd];
                            }
                        });
                    });
                };
                /**
                 * Get whether or not the current slide is the first slide.
                 */
                Slides.prototype.isBeginning = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    return [2 /*return*/, swiper.isBeginning];
                            }
                        });
                    });
                };
                /**
                 * Start auto play.
                 */
                Slides.prototype.startAutoplay = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    if (swiper.autoplay) {
                                        swiper.autoplay.start();
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Stop auto play.
                 */
                Slides.prototype.stopAutoplay = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    if (swiper.autoplay) {
                                        swiper.autoplay.stop();
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Lock or unlock the ability to slide to the next slide.
                 *
                 * @param lock If `true`, disable swiping to the next slide.
                 */
                Slides.prototype.lockSwipeToNext = function (lock) {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    swiper.allowSlideNext = !lock;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Lock or unlock the ability to slide to the previous slide.
                 *
                 * @param lock If `true`, disable swiping to the previous slide.
                 */
                Slides.prototype.lockSwipeToPrev = function (lock) {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    swiper.allowSlidePrev = !lock;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Lock or unlock the ability to slide to the next or previous slide.
                 *
                 * @param lock If `true`, disable swiping to the next and previous slide.
                 */
                Slides.prototype.lockSwipes = function (lock) {
                    return __awaiter(this, void 0, void 0, function () {
                        var swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getSwiper()];
                                case 1:
                                    swiper = _a.sent();
                                    swiper.allowSlideNext = !lock;
                                    swiper.allowSlidePrev = !lock;
                                    swiper.allowTouchMove = !lock;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                Slides.prototype.initSwiper = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var finalOptions, Swiper, swiper;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    finalOptions = this.normalizeOptions();
                                    return [4 /*yield*/, module.import('./swiper.bundle-695d7071.system.js')];
                                case 1:
                                    Swiper = (_a.sent()).Swiper;
                                    swiper = new Swiper(this.el, finalOptions);
                                    this.didInit = true;
                                    this.readySwiper(swiper);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                Slides.prototype.getSwiper = function () {
                    return this.swiper;
                };
                Slides.prototype.normalizeOptions = function () {
                    var _this = this;
                    // Base options, can be changed
                    // TODO Add interface SwiperOptions
                    var swiperOptions = {
                        effect: undefined,
                        direction: 'horizontal',
                        initialSlide: 0,
                        loop: false,
                        parallax: false,
                        slidesPerView: 1,
                        spaceBetween: 0,
                        speed: 300,
                        slidesPerColumn: 1,
                        slidesPerColumnFill: 'column',
                        slidesPerGroup: 1,
                        centeredSlides: false,
                        slidesOffsetBefore: 0,
                        slidesOffsetAfter: 0,
                        touchEventsTarget: 'container',
                        autoplay: false,
                        freeMode: false,
                        freeModeMomentum: true,
                        freeModeMomentumRatio: 1,
                        freeModeMomentumBounce: true,
                        freeModeMomentumBounceRatio: 1,
                        freeModeMomentumVelocityRatio: 1,
                        freeModeSticky: false,
                        freeModeMinimumVelocity: 0.02,
                        autoHeight: false,
                        setWrapperSize: false,
                        zoom: {
                            maxRatio: 3,
                            minRatio: 1,
                            toggle: false,
                        },
                        touchRatio: 1,
                        touchAngle: 45,
                        simulateTouch: true,
                        touchStartPreventDefault: false,
                        shortSwipes: true,
                        longSwipes: true,
                        longSwipesRatio: 0.5,
                        longSwipesMs: 300,
                        followFinger: true,
                        threshold: 0,
                        touchMoveStopPropagation: true,
                        touchReleaseOnEdges: false,
                        iOSEdgeSwipeDetection: false,
                        iOSEdgeSwipeThreshold: 20,
                        resistance: true,
                        resistanceRatio: 0.85,
                        watchSlidesProgress: false,
                        watchSlidesVisibility: false,
                        preventClicks: true,
                        preventClicksPropagation: true,
                        slideToClickedSlide: false,
                        loopAdditionalSlides: 0,
                        noSwiping: true,
                        runCallbacksOnInit: true,
                        coverflowEffect: {
                            rotate: 50,
                            stretch: 0,
                            depth: 100,
                            modifier: 1,
                            slideShadows: true
                        },
                        flipEffect: {
                            slideShadows: true,
                            limitRotation: true
                        },
                        cubeEffect: {
                            slideShadows: true,
                            shadow: true,
                            shadowOffset: 20,
                            shadowScale: 0.94
                        },
                        fadeEffect: {
                            crossfade: false
                        },
                        a11y: {
                            prevSlideMessage: 'Previous slide',
                            nextSlideMessage: 'Next slide',
                            firstSlideMessage: 'This is the first slide',
                            lastSlideMessage: 'This is the last slide'
                        }
                    };
                    if (this.pager) {
                        swiperOptions.pagination = {
                            el: this.paginationEl,
                            type: 'bullets',
                            clickable: false,
                            hideOnClick: false,
                        };
                    }
                    if (this.scrollbar) {
                        swiperOptions.scrollbar = {
                            el: this.scrollbarEl,
                            hide: true,
                        };
                    }
                    // Keep the event options separate, we dont want users
                    // overwriting these
                    var eventOptions = {
                        on: {
                            init: function () {
                                setTimeout(function () {
                                    _this.ionSlidesDidLoad.emit();
                                }, 20);
                            },
                            slideChangeTransitionStart: this.ionSlideWillChange.emit,
                            slideChangeTransitionEnd: this.ionSlideDidChange.emit,
                            slideNextTransitionStart: this.ionSlideNextStart.emit,
                            slidePrevTransitionStart: this.ionSlidePrevStart.emit,
                            slideNextTransitionEnd: this.ionSlideNextEnd.emit,
                            slidePrevTransitionEnd: this.ionSlidePrevEnd.emit,
                            transitionStart: this.ionSlideTransitionStart.emit,
                            transitionEnd: this.ionSlideTransitionEnd.emit,
                            sliderMove: this.ionSlideDrag.emit,
                            reachBeginning: this.ionSlideReachStart.emit,
                            reachEnd: this.ionSlideReachEnd.emit,
                            touchStart: this.ionSlideTouchStart.emit,
                            touchEnd: this.ionSlideTouchEnd.emit,
                            tap: this.ionSlideTap.emit,
                            doubleTap: this.ionSlideDoubleTap.emit
                        }
                    };
                    var customEvents = (!!this.options && !!this.options.on) ? this.options.on : {};
                    // merge "on" event listeners, while giving our event listeners priority
                    var mergedEventOptions = { on: Object.assign({}, customEvents, eventOptions.on) };
                    // Merge the base, user options, and events together then pas to swiper
                    return Object.assign({}, swiperOptions, this.options, mergedEventOptions);
                };
                Slides.prototype.hostData = function () {
                    var _a;
                    var mode = getIonMode(this);
                    return {
                        class: (_a = {},
                            _a["" + mode] = true,
                            // Used internally for styling
                            _a["slides-" + mode] = true,
                            _a['swiper-container'] = true,
                            _a)
                    };
                };
                Slides.prototype.__stencil_render = function () {
                    var _this = this;
                    return [
                        h("div", { class: "swiper-wrapper" }, h("slot", null)),
                        this.pager && h("div", { class: "swiper-pagination", ref: function (el) { return _this.paginationEl = el; } }),
                        this.scrollbar && h("div", { class: "swiper-scrollbar", ref: function (el) { return _this.scrollbarEl = el; } })
                    ];
                };
                Object.defineProperty(Slides, "assetsDirs", {
                    get: function () { return ["swiper"]; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Slides.prototype, "el", {
                    get: function () { return getElement(this); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Slides, "watchers", {
                    get: function () {
                        return {
                            "options": ["optionsChanged"]
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Slides.prototype.render = function () { return h(Host, this.hostData(), this.__stencil_render()); };
                Object.defineProperty(Slides, "style", {
                    get: function () { return "STYLE_TEXT_PLACEHOLDER:ion-slides"; },
                    enumerable: true,
                    configurable: true
                });
                return Slides;
            }());
            exports('ion_slides', Slides);
        }
    };
});
