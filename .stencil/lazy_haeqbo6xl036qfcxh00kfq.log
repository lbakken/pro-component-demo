import { createEvent as __stencil_createEvent } from "@stencil/core";
import { getConnect as __stencil_getConnect } from "@stencil/core";
import { getContext as __stencil_getContext } from "@stencil/core";
import { getElement as __stencil_getElement } from "@stencil/core";
import { Host as __stencil_Host } from "@stencil/core";
import { h as __stencil_h } from "@stencil/core";
import { registerInstance as __stencil_registerInstance } from "@stencil/core";
import { h } from '@stencil/core';
import { config } from '../../global/config';
import { getIonMode } from '../../global/ionic-global';
import { hostContext } from '../../utils/theme';
export class SkeletonText {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
        /**
         * If `true`, the skeleton text will animate.
         */
        this.animated = false;
    }
    calculateWidth() {
        // If width was passed in to the property use that first
        if (this.width !== undefined) {
            return {
                style: {
                    width: this.width
                }
            };
        }
        return;
    }
    __stencil_render() {
        return (h("span", null, "\u00A0"));
    }
    hostData() {
        const animated = this.animated && config.getBoolean('animated', true);
        const inMedia = hostContext('ion-avatar', this.el) || hostContext('ion-thumbnail', this.el);
        const mode = getIonMode(this);
        return Object.assign({ class: {
                [mode]: true,
                'skeleton-text-animated': animated,
                'in-media': inMedia
            } }, this.calculateWidth());
    }
    get el() { return __stencil_getElement(this); }
    render() { return __stencil_h(__stencil_Host, this.hostData(), this.__stencil_render()); }
    static get style() { return "STYLE_TEXT_PLACEHOLDER:ion-skeleton-text"; }
}
