System.register(['./chunk-5603b3cb.system.js', './chunk-17730780.system.js'], function (exports) {
    'use strict';
    var registerInstance, createEvent, getIonMode, h, getElement, Host, hostContext, createColorClasses, openURL;
    return {
        setters: [function (module) {
                registerInstance = module.r;
                createEvent = module.d;
                getIonMode = module.f;
                h = module.h;
                getElement = module.c;
                Host = module.H;
            }, function (module) {
                hostContext = module.h;
                createColorClasses = module.c;
                openURL = module.o;
            }],
        execute: function () {
            /**
             * @virtualProp {"ios" | "md"} mode - The mode determines which platform styles to use.
             */
            var FabButton = /** @class */ (function () {
                function FabButton(hostRef) {
                    var _this = this;
                    registerInstance(this, hostRef);
                    /**
                     * If `true`, the fab button will be show a close icon.
                     */
                    this.activated = false;
                    /**
                     * If `true`, the user cannot interact with the fab button.
                     */
                    this.disabled = false;
                    /**
                     * When using a router, it specifies the transition direction when navigating to
                     * another page using `href`.
                     */
                    this.routerDirection = 'forward';
                    /**
                     * If `true`, the fab button will show when in a fab-list.
                     */
                    this.show = false;
                    /**
                     * If `true`, the fab button will be translucent.
                     * Only applies to `ios` mode on devices that support
                     * [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
                     */
                    this.translucent = false;
                    /**
                     * The type of the button.
                     */
                    this.type = 'button';
                    this.onFocus = function () {
                        _this.ionFocus.emit();
                    };
                    this.onBlur = function () {
                        _this.ionBlur.emit();
                    };
                    this.ionFocus = createEvent(this, "ionFocus", 7);
                    this.ionBlur = createEvent(this, "ionBlur", 7);
                }
                FabButton.prototype.hostData = function () {
                    var _a;
                    var _b = this, el = _b.el, disabled = _b.disabled, color = _b.color, activated = _b.activated, show = _b.show, translucent = _b.translucent, size = _b.size;
                    var inList = hostContext('ion-fab-list', el);
                    var mode = getIonMode(this);
                    return {
                        'aria-disabled': disabled ? 'true' : null,
                        class: Object.assign({}, createColorClasses(color), (_a = {}, _a[mode] = true, _a['fab-button-in-list'] = inList, _a['fab-button-translucent-in-list'] = inList && translucent, _a['fab-button-close-active'] = activated, _a['fab-button-show'] = show, _a['fab-button-disabled'] = disabled, _a['fab-button-translucent'] = translucent, _a['ion-activatable'] = true, _a['ion-focusable'] = true, _a["fab-button-" + size] = size !== undefined, _a))
                    };
                };
                FabButton.prototype.__stencil_render = function () {
                    var _this = this;
                    var mode = getIonMode(this);
                    var TagType = this.href === undefined ? 'button' : 'a';
                    var attrs = (TagType === 'button')
                        ? { type: this.type }
                        : {
                            download: this.download,
                            href: this.href,
                            rel: this.rel,
                            target: this.target
                        };
                    return (h(TagType, Object.assign({}, attrs, { class: "button-native", disabled: this.disabled, onFocus: this.onFocus, onBlur: this.onBlur, onClick: function (ev) { return openURL(_this.href, ev, _this.routerDirection); } }), h("span", { class: "close-icon" }, h("ion-icon", { name: "close", lazy: false })), h("span", { class: "button-inner" }, h("slot", null)), mode === 'md' && h("ion-ripple-effect", null)));
                };
                Object.defineProperty(FabButton.prototype, "el", {
                    get: function () { return getElement(this); },
                    enumerable: true,
                    configurable: true
                });
                FabButton.prototype.render = function () { return h(Host, this.hostData(), this.__stencil_render()); };
                Object.defineProperty(FabButton, "style", {
                    get: function () { return "STYLE_TEXT_PLACEHOLDER:ion-fab-button"; },
                    enumerable: true,
                    configurable: true
                });
                return FabButton;
            }());
            exports('ion_fab_button', FabButton);
        }
    };
});
