import { createEvent as __stencil_createEvent } from "@stencil/core";
import { getConnect as __stencil_getConnect } from "@stencil/core";
import { getContext as __stencil_getContext } from "@stencil/core";
import { getElement as __stencil_getElement } from "@stencil/core";
import { Host as __stencil_Host } from "@stencil/core";
import { h as __stencil_h } from "@stencil/core";
import { registerInstance as __stencil_registerInstance } from "@stencil/core";
import { h } from '@stencil/core';
import { getIonMode } from '../../global/ionic-global';
import { createColorClasses } from '../../utils/theme';
export class ToolbarTitle {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
    }
    getMode() {
        const mode = getIonMode(this);
        const toolbar = this.el.closest('ion-toolbar');
        return (toolbar && toolbar.mode) || mode;
    }
    hostData() {
        const mode = this.getMode();
        return {
            class: Object.assign({ [mode]: true, [`title-${mode}`]: true }, createColorClasses(this.color))
        };
    }
    __stencil_render() {
        return [
            h("div", { class: "toolbar-title" }, h("slot", null))
        ];
    }
    get el() { return __stencil_getElement(this); }
    render() { return __stencil_h(__stencil_Host, this.hostData(), this.__stencil_render()); }
    static get style() { return "STYLE_TEXT_PLACEHOLDER:ion-title"; }
}
