{"moduleFile":{"sourceFilePath":"/Users/admin/repos/pro-component-demo/src/components/claim-form/claim-form.tsx","jsFilePath":"/Users/admin/repos/pro-component-demo/src/components/claim-form/claim-form.js","cmps":[{"isLegacy":false,"tagName":"claim-form","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"ClaimForm","elementRef":"el","encapsulation":"none","properties":[],"virtualProperties":[],"states":[{"name":"submitButton"}],"methods":[],"listeners":[{"name":"inputChange","method":"onInputChange","capture":false,"passive":false}],"events":[{"name":"closeClaim","method":"closeClaim","bubbles":true,"cancelable":true,"composed":true,"docs":{"tags":[],"text":""},"complexType":{"original":"any","resolved":"any","references":{}},"internal":false}],"watchers":[],"styles":[{"modeName":"$","styleStr":null,"styleId":"CLAIM-FORM","compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/Users/admin/repos/pro-component-demo/src/components/claim-form/claim-form.css","relativePath":"claim-form.css","originalComponentPath":"claim-form.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/Users/admin/repos/pro-component-demo/src/components/claim-form/claim-form.js","sourceFilePath":"/Users/admin/repos/pro-component-demo/src/components/claim-form/claim-form.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":true,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":true,"hasLifecycle":true,"hasListener":true,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":false,"hasMode":false,"hasAttribute":false,"hasProp":false,"hasPropNumber":false,"hasPropBoolean":false,"hasPropString":false,"hasPropMutable":false,"hasReflect":false,"hasRenderFn":true,"hasState":true,"hasStyle":true,"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":true,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":true,"hasWatchCallback":false,"isPlain":false,"htmlAttrNames":["size","placeholder","regex","label","required","id","type","disabled","class"],"htmlTagNames":["pro-modal","pro-content","h1","form","pro-grid","pro-row","pro-col","pro-input","pro-button"],"isUpdateable":true,"potentialCmpRefs":["pro-modal","pro-content","pro-grid","pro-row","pro-col","pro-input","pro-button"]}],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core"],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"potentialCmpRefs":[]},"jsText":"import { h } from '@stencil/core';\r\nexport class ClaimForm {\r\n    constructor() {\r\n        this.submitButton = true;\r\n    }\r\n    handleSubmit(ev) {\r\n        ev.preventDefault();\r\n        this.closeClaim.emit();\r\n    }\r\n    componentDidLoad() {\r\n        this.valid = this.el.querySelectorAll('pro-input');\r\n        this.isValid = new Array(this.valid.length);\r\n        for (var i = 0; i < this.valid.length; i++) {\r\n            this.isValid[i] = !this.valid.item(i).required;\r\n        }\r\n    }\r\n    validate() {\r\n        var valid = true;\r\n        this.isValid.forEach((isVal) => {\r\n            valid = valid && isVal;\r\n        });\r\n        this.submitButton = !valid;\r\n        return valid;\r\n    }\r\n    onInputChange(ev) {\r\n        for (var i = 0; i < this.valid.length; i++) {\r\n            if (this.valid.item(i).shadowRoot.querySelector('input').name == ev.detail.name) {\r\n                this.isValid[i] = ev.detail.valid;\r\n            }\r\n        }\r\n        this.validate();\r\n    }\r\n    render() {\r\n        return (h(\"pro-modal\", null,\r\n            h(\"pro-content\", null,\r\n                h(\"h1\", null, \"File a Claim\"),\r\n                h(\"form\", { onSubmit: (ev) => this.handleSubmit(ev) },\r\n                    h(\"pro-grid\", null,\r\n                        h(\"pro-row\", null,\r\n                            h(\"pro-col\", { size: \"6\" },\r\n                                h(\"pro-input\", { placeholder: \"firstName\", regex: /^([^0-9]*)$/, label: \"First Name\", required: true })),\r\n                            h(\"pro-col\", { size: \"6\" },\r\n                                h(\"pro-input\", { placeholder: \"lastName\", regex: /^([^0-9]*)$/, label: \"Last Name\", required: true }))),\r\n                        h(\"pro-row\", null,\r\n                            h(\"pro-col\", { size: \"7\" },\r\n                                h(\"pro-input\", { placeholder: \"Email\", regex: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, label: \"Email\", required: true })),\r\n                            h(\"pro-col\", { size: \"5\" },\r\n                                h(\"pro-input\", { placeholder: \"Policy Number\", regex: /^[0-9]{10}$/, label: \"Policy Number\", required: true }))),\r\n                        h(\"pro-row\", null,\r\n                            h(\"pro-col\", { size: \"6\" },\r\n                                h(\"pro-input\", { placeholder: \"Address 1\", label: \"Address 1\", required: true })),\r\n                            h(\"pro-col\", { size: \"6\" },\r\n                                h(\"pro-input\", { placeholder: \"Address 2\", label: \"Address 2\" }))),\r\n                        h(\"pro-row\", null,\r\n                            h(\"pro-col\", { size: \"4\" },\r\n                                h(\"pro-input\", { placeholder: \"City\", label: \"City\", required: true })),\r\n                            h(\"pro-col\", { size: \"4\" },\r\n                                h(\"pro-input\", { placeholder: \"State\", label: \"State\", regex: /^[A-Z]{2}$/, required: true })),\r\n                            h(\"pro-col\", { size: \"4\" },\r\n                                h(\"pro-input\", { placeholder: \"Zip\", label: \"Zip\", regex: /^[0-9]{5}$/, required: true }))),\r\n                        h(\"pro-row\", null,\r\n                            h(\"pro-col\", { size: \"6\" },\r\n                                h(\"pro-input\", { placeholder: \"Date\", label: \"Date of Incident\", required: true })),\r\n                            h(\"pro-col\", { size: \"6\" },\r\n                                h(\"pro-input\", { placeholder: \"Time\", label: \"Time of Incident\", required: true }))),\r\n                        h(\"pro-row\", null,\r\n                            h(\"pro-col\", { size: \"12\", id: \"quote-button\" },\r\n                                h(\"pro-button\", { type: \"submit\", disabled: this.submitButton, class: 'lower' }, \"Submit\"))))))));\r\n    }\r\n    static get is() { return \"claim-form\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"claim-form.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"claim-form.css\"]\r\n    }; }\r\n    static get states() { return {\r\n        \"submitButton\": {}\r\n    }; }\r\n    static get events() { return [{\r\n            \"method\": \"closeClaim\",\r\n            \"name\": \"closeClaim\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"complexType\": {\r\n                \"original\": \"any\",\r\n                \"resolved\": \"any\",\r\n                \"references\": {}\r\n            }\r\n        }]; }\r\n    static get elementRef() { return \"el\"; }\r\n    static get listeners() { return [{\r\n            \"name\": \"inputChange\",\r\n            \"method\": \"onInputChange\",\r\n            \"target\": undefined,\r\n            \"capture\": false,\r\n            \"passive\": false\r\n        }]; }\r\n}\r\n"}