System.register(['./chunk-5603b3cb.system.js'], function (exports) {
    'use strict';
    var registerInstance, createEvent, getIonMode, h, Host, getElement;
    return {
        setters: [function (module) {
                registerInstance = module.r;
                createEvent = module.d;
                getIonMode = module.f;
                h = module.h;
                Host = module.H;
                getElement = module.c;
            }],
        execute: function () {
            var ids = 0;
            /**
             * @virtualProp {"ios" | "md"} mode - The mode determines which platform styles to use.
             */
            var SegmentButton = /** @class */ (function () {
                function SegmentButton(hostRef) {
                    var _this = this;
                    registerInstance(this, hostRef);
                    /**
                     * If `true`, the segment button is selected.
                     */
                    this.checked = false;
                    /**
                     * If `true`, the user cannot interact with the segment button.
                     */
                    this.disabled = false;
                    /**
                     * Set the layout of the text and icon in the segment.
                     */
                    this.layout = 'icon-top';
                    /**
                     * The type of the button.
                     */
                    this.type = 'button';
                    /**
                     * The value of the segment button.
                     */
                    this.value = 'ion-sb-' + (ids++);
                    this.onClick = function () {
                        _this.checked = true;
                    };
                    this.ionSelect = createEvent(this, "ionSelect", 7);
                }
                SegmentButton.prototype.checkedChanged = function (checked, prev) {
                    if (checked && !prev) {
                        this.ionSelect.emit();
                    }
                };
                Object.defineProperty(SegmentButton.prototype, "hasLabel", {
                    get: function () {
                        return !!this.el.querySelector('ion-label');
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SegmentButton.prototype, "hasIcon", {
                    get: function () {
                        return !!this.el.querySelector('ion-icon');
                    },
                    enumerable: true,
                    configurable: true
                });
                SegmentButton.prototype.render = function () {
                    var _a;
                    var _b = this, checked = _b.checked, type = _b.type, disabled = _b.disabled, hasIcon = _b.hasIcon, hasLabel = _b.hasLabel, layout = _b.layout;
                    var mode = getIonMode(this);
                    return (h(Host, { onClick: this.onClick, "aria-disabled": disabled ? 'true' : null, class: (_a = {},
                            _a[mode] = true,
                            _a['segment-button-has-label'] = hasLabel,
                            _a['segment-button-has-icon'] = hasIcon,
                            _a['segment-button-has-label-only'] = hasLabel && !hasIcon,
                            _a['segment-button-has-icon-only'] = hasIcon && !hasLabel,
                            _a['segment-button-disabled'] = disabled,
                            _a['segment-button-checked'] = checked,
                            _a["segment-button-layout-" + layout] = true,
                            _a['ion-activatable'] = true,
                            _a['ion-activatable-instant'] = true,
                            _a) }, h("button", { type: type, "aria-pressed": checked ? 'true' : null, class: "button-native", disabled: disabled }, h("slot", null), mode === 'md' && h("ion-ripple-effect", null)), h("div", { class: "segment-button-indicator" })));
                };
                Object.defineProperty(SegmentButton.prototype, "el", {
                    get: function () { return getElement(this); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SegmentButton, "watchers", {
                    get: function () {
                        return {
                            "checked": ["checkedChanged"]
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SegmentButton, "style", {
                    get: function () { return "STYLE_TEXT_PLACEHOLDER:ion-segment-button"; },
                    enumerable: true,
                    configurable: true
                });
                return SegmentButton;
            }());
            exports('ion_segment_button', SegmentButton);
        }
    };
});
