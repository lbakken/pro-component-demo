System.register(['./chunk-5603b3cb.system.js', './chunk-17730780.system.js'], function (exports) {
    'use strict';
    var registerInstance, getIonMode, h, getElement, Host, createColorClasses;
    return {
        setters: [function (module) {
                registerInstance = module.r;
                getIonMode = module.f;
                h = module.h;
                getElement = module.c;
                Host = module.H;
            }, function (module) {
                createColorClasses = module.c;
            }],
        execute: function () {
            var ToolbarTitle = /** @class */ (function () {
                function ToolbarTitle(hostRef) {
                    registerInstance(this, hostRef);
                }
                ToolbarTitle.prototype.getMode = function () {
                    var mode = getIonMode(this);
                    var toolbar = this.el.closest('ion-toolbar');
                    return (toolbar && toolbar.mode) || mode;
                };
                ToolbarTitle.prototype.hostData = function () {
                    var _a;
                    var mode = this.getMode();
                    return {
                        class: Object.assign((_a = {}, _a[mode] = true, _a["title-" + mode] = true, _a), createColorClasses(this.color))
                    };
                };
                ToolbarTitle.prototype.__stencil_render = function () {
                    return [
                        h("div", { class: "toolbar-title" }, h("slot", null))
                    ];
                };
                Object.defineProperty(ToolbarTitle.prototype, "el", {
                    get: function () { return getElement(this); },
                    enumerable: true,
                    configurable: true
                });
                ToolbarTitle.prototype.render = function () { return h(Host, this.hostData(), this.__stencil_render()); };
                Object.defineProperty(ToolbarTitle, "style", {
                    get: function () { return "STYLE_TEXT_PLACEHOLDER:ion-title"; },
                    enumerable: true,
                    configurable: true
                });
                return ToolbarTitle;
            }());
            exports('ion_title', ToolbarTitle);
        }
    };
});
