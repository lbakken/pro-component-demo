{"moduleFile":{"sourceFilePath":"/Users/admin/repos/pro-component-demo/src/components/weather-card/weather-card.tsx","jsFilePath":"/Users/admin/repos/pro-component-demo/src/components/weather-card/weather-card.js","cmps":[{"isLegacy":false,"tagName":"weather-card","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"WeatherCard","elementRef":"el","encapsulation":"none","properties":[{"name":"isProCust","type":"boolean","attribute":"is-pro-cust","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"boolean","resolved":"boolean","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"history","type":"string","attribute":"history","reflect":false,"mutable":true,"required":true,"optional":false,"complexType":{"original":"string","resolved":"string","references":{}},"docs":{"tags":[],"text":""},"internal":false}],"virtualProperties":[],"states":[{"name":"header"},{"name":"subHeader"},{"name":"body"},{"name":"button"},{"name":"icon"}],"methods":[],"listeners":[],"events":[{"name":"styleSet","method":"styleSet","bubbles":true,"cancelable":true,"composed":true,"docs":{"tags":[],"text":""},"complexType":{"original":"any","resolved":"any","references":{}},"internal":false},{"name":"weatherButtonClick","method":"weatherButtonClick","bubbles":true,"cancelable":true,"composed":true,"docs":{"tags":[],"text":""},"complexType":{"original":"any","resolved":"any","references":{}},"internal":false}],"watchers":[{"propName":"history","methodName":"onHistoryChange"}],"styles":[{"modeName":"$","styleStr":null,"styleId":"WEATHER-CARD","compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/Users/admin/repos/pro-component-demo/src/components/weather-card/weather-card.css","relativePath":"weather-card.css","originalComponentPath":"weather-card.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/Users/admin/repos/pro-component-demo/src/components/weather-card/weather-card.js","sourceFilePath":"/Users/admin/repos/pro-component-demo/src/components/weather-card/weather-card.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":true,"hasComponentDidLoadFn":false,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":true,"hasLifecycle":true,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":false,"hasMode":false,"hasAttribute":true,"hasProp":true,"hasPropNumber":false,"hasPropBoolean":true,"hasPropString":true,"hasPropMutable":true,"hasReflect":false,"hasRenderFn":true,"hasState":true,"hasStyle":true,"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":true,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":true,"hasWatchCallback":true,"isPlain":false,"htmlAttrNames":["class","src","alt","size"],"htmlTagNames":["img","h1","pro-card","pro-content","h2","pro-grid","pro-row","pro-col","p","pro-button"],"isUpdateable":true,"potentialCmpRefs":["pro-card","pro-content","pro-grid","pro-row","pro-col","pro-button"]}],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core"],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"potentialCmpRefs":[]},"jsText":"import { h } from '@stencil/core';\r\nexport class WeatherCard {\r\n    onHistoryChange(newValue) {\r\n        this.history = newValue;\r\n        this.updateInfo();\r\n    }\r\n    updateInfo() {\r\n        this.subHeader = 'We\\'ve got you covered!';\r\n        this.body = 'Follow the link below!';\r\n        this.button = 'Continue';\r\n        this.icon = h(\"img\", null);\r\n        if (this.isProCust == true) {\r\n            this.subHeader = 'Need a new quote?';\r\n            this.button = 'Get a new Quote!';\r\n        }\r\n        else if (this.isProCust == false) {\r\n            this.subHeader = 'Need a quote?';\r\n            this.button = 'Get a Quote!';\r\n        }\r\n        this.styleSet.emit(this.history);\r\n        switch (this.history) {\r\n            case 'none':\r\n                this.header = h(\"h1\", { class: \"sunny\" }, \"Looks Clear to Me!\");\r\n                this.subHeader = 'What a beautiful day!';\r\n                this.icon = h(\"img\", { src: \"../../assets/icon/base.png\", alt: \"good weather\" });\r\n                break;\r\n            case 'hail':\r\n                this.header = h(\"h1\", { class: \"dark\" }, \"Hail got you down?\");\r\n                this.icon = h(\"img\", { src: \"../../assets/icon/hail.png\", alt: \"hail\" });\r\n                break;\r\n            case 'snow':\r\n                this.header = h(\"h1\", { class: \"dark\" }, \"Snow got you down?\");\r\n                this.icon = h(\"img\", { src: \"../../assets/icon/snow.png\", alt: \"snow\" });\r\n                break;\r\n            case 'thunderstorms':\r\n                this.header = h(\"h1\", { class: \"dark\" }, \"Rain got you down?\");\r\n                this.icon = h(\"img\", { src: \"../../assets/icon/rain.png\", alt: \"rain\" });\r\n                break;\r\n            case 'wind':\r\n                this.header = h(\"h1\", { class: \"dark\" }, \"Wind got you down?\");\r\n                this.icon = h(\"img\", { src: \"../../assets/icon/wind.png\", alt: \"wind\" });\r\n                break;\r\n            default:\r\n                this.header = 'Oops, something went wrong...';\r\n                this.body = 'Click below to keep on keeping on.';\r\n                this.button = 'Keep on Keeping on';\r\n                break;\r\n        }\r\n    }\r\n    componentWillLoad() {\r\n        this.updateInfo();\r\n    }\r\n    render() {\r\n        return (h(\"pro-card\", null,\r\n            h(\"pro-content\", null,\r\n                h(\"h1\", null, this.header),\r\n                this.icon,\r\n                h(\"h2\", null, this.subHeader),\r\n                h(\"pro-grid\", null,\r\n                    h(\"pro-row\", null,\r\n                        h(\"pro-col\", null,\r\n                            h(\"p\", null, this.body))),\r\n                    h(\"pro-row\", null,\r\n                        h(\"pro-col\", { size: \"12\" },\r\n                            h(\"pro-button\", { onClick: () => this.weatherButtonClick.emit() }, this.button)))))));\r\n    }\r\n    static get is() { return \"weather-card\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"weather-card.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"weather-card.css\"]\r\n    }; }\r\n    static get properties() { return {\r\n        \"isProCust\": {\r\n            \"type\": \"boolean\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"boolean\",\r\n                \"resolved\": \"boolean\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"is-pro-cust\",\r\n            \"reflect\": false\r\n        },\r\n        \"history\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": true,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": true,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"history\",\r\n            \"reflect\": false\r\n        }\r\n    }; }\r\n    static get states() { return {\r\n        \"header\": {},\r\n        \"subHeader\": {},\r\n        \"body\": {},\r\n        \"button\": {},\r\n        \"icon\": {}\r\n    }; }\r\n    static get events() { return [{\r\n            \"method\": \"styleSet\",\r\n            \"name\": \"styleSet\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"complexType\": {\r\n                \"original\": \"any\",\r\n                \"resolved\": \"any\",\r\n                \"references\": {}\r\n            }\r\n        }, {\r\n            \"method\": \"weatherButtonClick\",\r\n            \"name\": \"weatherButtonClick\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"complexType\": {\r\n                \"original\": \"any\",\r\n                \"resolved\": \"any\",\r\n                \"references\": {}\r\n            }\r\n        }]; }\r\n    static get elementRef() { return \"el\"; }\r\n    static get watchers() { return [{\r\n            \"propName\": \"history\",\r\n            \"methodName\": \"onHistoryChange\"\r\n        }]; }\r\n}\r\n"}