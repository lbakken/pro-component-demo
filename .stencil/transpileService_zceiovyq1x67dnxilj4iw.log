{"moduleFile":{"sourceFilePath":"/Users/admin/repos/pro-component-demo/src/components/app-home/app-home.tsx","jsFilePath":"/Users/admin/repos/pro-component-demo/src/components/app-home/app-home.js","cmps":[{"isLegacy":false,"tagName":"app-home","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"AppHome","elementRef":"el","encapsulation":"none","properties":[],"virtualProperties":[],"states":[{"name":"weather"},{"name":"coords"},{"name":"city"},{"name":"isCustomer"}],"methods":[],"listeners":[{"name":"closeClaim","method":"onCloseClaim","capture":false,"passive":false},{"name":"closeQuote","method":"onCloseQuote","capture":false,"passive":false},{"name":"closeThanks","method":"onCloseThanks","capture":false,"passive":false},{"name":"closeOops","method":"onCloseOops","capture":false,"passive":false},{"name":"changeWeather","method":"onChangeWeather","capture":false,"passive":false},{"name":"isCustomer","method":"onIsCustomer","capture":false,"passive":false},{"name":"location","method":"onLocationChange","capture":false,"passive":false},{"name":"weatherButtonClick","method":"onWeatherButtonClick","capture":false,"passive":false},{"name":"styleSet","method":"changeWeatherBackground","capture":false,"passive":false}],"events":[],"watchers":[],"styles":[{"modeName":"$","styleStr":null,"styleId":"APP-HOME","compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/Users/admin/repos/pro-component-demo/src/components/app-home/app-home.css","relativePath":"app-home.css","originalComponentPath":"app-home.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/Users/admin/repos/pro-component-demo/src/components/app-home/app-home.js","sourceFilePath":"/Users/admin/repos/pro-component-demo/src/components/app-home/app-home.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":true,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":false,"hasLifecycle":true,"hasListener":true,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":false,"hasMode":false,"hasAttribute":false,"hasProp":false,"hasPropNumber":false,"hasPropBoolean":false,"hasPropString":false,"hasPropMutable":false,"hasReflect":false,"hasRenderFn":true,"hasState":true,"hasStyle":true,"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":false,"hasVdomListener":true,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":true,"hasWatchCallback":false,"isPlain":false,"htmlAttrNames":["id","src","history","href","class"],"htmlTagNames":["pro-header","ion-toolbar","h1","div","img","pro-grid","pro-row","pro-col","welcome-card","location-card","weather-card","default-links","ion-footer","a","claim-form","quote-form","thanks-modal","oops-modal","general-redirect","prog-cust-question"],"isUpdateable":true,"potentialCmpRefs":["pro-header","ion-toolbar","pro-grid","pro-row","pro-col","welcome-card","location-card","weather-card","default-links","ion-footer","claim-form","quote-form","thanks-modal","oops-modal","general-redirect","prog-cust-question"]}],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core"],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":["/Users/admin/repos/pro-component-demo/src/helpers/utils"],"originalCollectionComponentPath":null,"potentialCmpRefs":[]},"jsText":"import { h, Host } from '@stencil/core';\r\nimport { checkForBadWeatherByCity, checkForBadWeatherByBrowser } from '../../helpers/utils';\r\nexport class AppHome {\r\n    constructor() {\r\n        this.weather = '';\r\n        this.openQuestionModal = () => {\r\n            this.progQuestion.present();\r\n        };\r\n        this.openQuoteModal = () => {\r\n            this.weather != 'none' ? this.generalRedirect.present() : this.quoteModal.present();\r\n        };\r\n        this.openClaimModal = () => {\r\n            this.claimModal.present();\r\n        };\r\n    }\r\n    componentDidLoad() {\r\n        let modals = this.el.querySelectorAll('pro-modal');\r\n        this.claimModal = modals.item(0);\r\n        this.quoteModal = modals.item(1);\r\n        this.thanksModal = modals.item(2);\r\n        this.oopsModal = modals.item(3);\r\n        this.generalRedirect = modals.item(4);\r\n        this.progQuestion = modals.item(5);\r\n        this.header = document.querySelector('h1');\r\n    }\r\n    makeAPIcall() {\r\n        if (this.weather == '') {\r\n            if (this.city != null) {\r\n                checkForBadWeatherByCity(this.city).then((value) => {\r\n                    this.weather = value;\r\n                }).catch((er) => {\r\n                    console.warn(er);\r\n                    this.oopsModal.present();\r\n                });\r\n            }\r\n            else {\r\n                checkForBadWeatherByBrowser().then((value) => {\r\n                    this.weather = value;\r\n                }).catch(er => {\r\n                    console.warn(er);\r\n                    this.oopsModal.present();\r\n                });\r\n            }\r\n        }\r\n    }\r\n    reset() {\r\n        window.location.reload();\r\n    }\r\n    onCloseClaim() {\r\n        this.claimModal.dismiss();\r\n        this.thanksModal.present();\r\n    }\r\n    onCloseQuote() {\r\n        this.quoteModal.dismiss();\r\n        this.thanksModal.present();\r\n    }\r\n    onCloseThanks() {\r\n        this.thanksModal.dismiss();\r\n        this.reset();\r\n    }\r\n    onCloseOops() {\r\n        this.oopsModal.dismiss();\r\n        this.reset();\r\n    }\r\n    onChangeWeather(event) {\r\n        this.weather = event.detail.weather;\r\n        this.header.style.color = 'rgba(38, 58, 60, 1)';\r\n    }\r\n    onIsCustomer(event) {\r\n        this.isCustomer = event.detail.response;\r\n        if (this.weather == 'none') {\r\n            this.quoteModal.present();\r\n        }\r\n        else if (this.weather) {\r\n            this.isCustomer ? this.claimModal.present() : this.generalRedirect.present();\r\n        }\r\n    }\r\n    onLocationChange(ev) {\r\n        ev.detail ? this.city = ev.detail.city.value : this.city = null;\r\n        this.makeAPIcall();\r\n    }\r\n    onWeatherButtonClick() {\r\n        if (this.isCustomer == null) {\r\n            this.openQuestionModal();\r\n        }\r\n        else {\r\n            if (this.weather == 'none') {\r\n                this.quoteModal.present();\r\n            }\r\n            else if (this.weather) {\r\n                this.isCustomer ? this.claimModal.present() : this.generalRedirect.present();\r\n            }\r\n        }\r\n    }\r\n    changeWeatherBackground(event) {\r\n        if (event.detail == 'none') {\r\n            this.header.style.color = 'rgba(252, 213, 129, 1)';\r\n        }\r\n        else {\r\n            this.header.style.color = 'rgba(38, 58, 60, 1)';\r\n        }\r\n    }\r\n    render() {\r\n        return (h(Host, null,\r\n            h(\"pro-header\", { onClick: () => this.reset() },\r\n                h(\"ion-toolbar\", null,\r\n                    h(\"h1\", { id: \"main-header\" }, \"Home\"),\r\n                    (this.weather == '') ?\r\n                        h(\"div\", null)\r\n                        :\r\n                            h(\"img\", { id: \"home\", src: \"../assets/icon/house.png\" }))),\r\n            h(\"div\", null,\r\n                h(\"pro-grid\", null,\r\n                    (this.weather == '') ?\r\n                        h(\"div\", null,\r\n                            h(\"pro-row\", null,\r\n                                h(\"pro-col\", null,\r\n                                    h(\"welcome-card\", null))),\r\n                            h(\"pro-row\", null,\r\n                                h(\"pro-col\", null,\r\n                                    h(\"location-card\", null))))\r\n                        :\r\n                            h(\"pro-row\", null,\r\n                                h(\"pro-col\", null,\r\n                                    h(\"weather-card\", { history: this.weather }))),\r\n                    h(\"pro-row\", null,\r\n                        h(\"pro-col\", null,\r\n                            h(\"default-links\", null))))),\r\n            h(\"ion-footer\", null,\r\n                h(\"ion-toolbar\", null,\r\n                    \"\\u00A0 Powered By \",\r\n                    h(\"a\", { href: \"https://darksky.net/dev\" }, \"Dark Sky API\"))),\r\n            h(\"div\", { class: \"modal-container\" },\r\n                h(\"claim-form\", null),\r\n                h(\"quote-form\", null),\r\n                h(\"thanks-modal\", null),\r\n                h(\"oops-modal\", null),\r\n                h(\"general-redirect\", null),\r\n                h(\"prog-cust-question\", null))));\r\n    }\r\n    static get is() { return \"app-home\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"app-home.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"app-home.css\"]\r\n    }; }\r\n    static get states() { return {\r\n        \"weather\": {},\r\n        \"coords\": {},\r\n        \"city\": {},\r\n        \"isCustomer\": {}\r\n    }; }\r\n    static get elementRef() { return \"el\"; }\r\n    static get listeners() { return [{\r\n            \"name\": \"closeClaim\",\r\n            \"method\": \"onCloseClaim\",\r\n            \"target\": undefined,\r\n            \"capture\": false,\r\n            \"passive\": false\r\n        }, {\r\n            \"name\": \"closeQuote\",\r\n            \"method\": \"onCloseQuote\",\r\n            \"target\": undefined,\r\n            \"capture\": false,\r\n            \"passive\": false\r\n        }, {\r\n            \"name\": \"closeThanks\",\r\n            \"method\": \"onCloseThanks\",\r\n            \"target\": undefined,\r\n            \"capture\": false,\r\n            \"passive\": false\r\n        }, {\r\n            \"name\": \"closeOops\",\r\n            \"method\": \"onCloseOops\",\r\n            \"target\": undefined,\r\n            \"capture\": false,\r\n            \"passive\": false\r\n        }, {\r\n            \"name\": \"changeWeather\",\r\n            \"method\": \"onChangeWeather\",\r\n            \"target\": undefined,\r\n            \"capture\": false,\r\n            \"passive\": false\r\n        }, {\r\n            \"name\": \"isCustomer\",\r\n            \"method\": \"onIsCustomer\",\r\n            \"target\": undefined,\r\n            \"capture\": false,\r\n            \"passive\": false\r\n        }, {\r\n            \"name\": \"location\",\r\n            \"method\": \"onLocationChange\",\r\n            \"target\": undefined,\r\n            \"capture\": false,\r\n            \"passive\": false\r\n        }, {\r\n            \"name\": \"weatherButtonClick\",\r\n            \"method\": \"onWeatherButtonClick\",\r\n            \"target\": undefined,\r\n            \"capture\": false,\r\n            \"passive\": false\r\n        }, {\r\n            \"name\": \"styleSet\",\r\n            \"method\": \"changeWeatherBackground\",\r\n            \"target\": undefined,\r\n            \"capture\": false,\r\n            \"passive\": false\r\n        }]; }\r\n}\r\n"}