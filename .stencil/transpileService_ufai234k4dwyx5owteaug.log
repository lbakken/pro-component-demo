{"moduleFile":{"sourceFilePath":"/Users/admin/repos/pro-component-demo/src/helpers/utils.ts","jsFilePath":"/Users/admin/repos/pro-component-demo/src/helpers/utils.js","cmps":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"potentialCmpRefs":[]},"jsText":"/**\r\n * @name getDarkSkiesApiResponse\r\n * @summary Makes a call to the Dark Skies API\r\n * @param city optional parameter, expecting a city name\r\n * if supplied will get weather for that city\r\n * @param forcastDate optional parameter, expecting UNIX timestamp\r\n * if supplied will get weather from given time to 24 hours after\r\n * @param coordinates optional parameter, expecting coordinates object\r\n * if supplied, overrides city and gets weather for that location\r\n * @returns DarkSkiesWeather object mapped to the API Response\r\n */\r\nasync function getDarkSkiesApiResponse(city = \"Cleveland\", forcastDate = Math.round(+new Date() / 1000), coordinates) {\r\n    let longitude;\r\n    let latitide;\r\n    if (coordinates) {\r\n        longitude = coordinates.longitude;\r\n        latitide = coordinates.latitude;\r\n    }\r\n    else {\r\n        let openWeatherResponse = await getOpenWeatherApiResponse(city);\r\n        longitude = openWeatherResponse.coord.lon;\r\n        latitide = openWeatherResponse.coord.lat;\r\n    }\r\n    let apiKey = \"5b1a0e3a0304d5a3058513c15c9bd987\";\r\n    let proxyUrl = 'https://cors-anywhere.herokuapp.com/';\r\n    let apiUrl = `https://api.darksky.net/forecast/${apiKey}/${latitide},${longitude},${forcastDate}`;\r\n    let darkSkiesApiResponse;\r\n    await fetch(proxyUrl + apiUrl)\r\n        .then((response) => response.json())\r\n        .then(response => { darkSkiesApiResponse = response; });\r\n    return darkSkiesApiResponse;\r\n}\r\n/**\r\n * @name getOpenWeatherApiResponse\r\n * @summary gets api response from open weather API\r\n * @param city ptional parameter, expecting a city name\r\n * if supplied will get weather for that city\r\n * @returns Promise of OpenWeather which is an object for mapping the response\r\n */\r\nasync function getOpenWeatherApiResponse(city = \"Cleveland\") {\r\n    let apiKey = \"0e6736aa176b5c618a775168e0af47d8\";\r\n    let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n    let weatherApiResponse;\r\n    await fetch(apiUrl)\r\n        .then((response) => response.json())\r\n        .then(response => { weatherApiResponse = response; });\r\n    return weatherApiResponse;\r\n}\r\n/**\r\n * @name parseForDangerousWeather\r\n * @summary Parses Dark skies weather object for dangerous weather (hail, wind, snow, thunderstorms)\r\n * @param apiResponse Expecting Dark Skies Weather Object\r\n * @returns type of dangerous weather found, as a string, returns \"none\" if nothing found\r\n */\r\nfunction parseForDangerousWeather(apiResponse) {\r\n    let dangerousWeatherArray = [\"hail\", \"wind\", \"snow\", \"thunderstorms\", \"rain\"];\r\n    let dangerousWeatherResponse;\r\n    for (let i = 0; i < apiResponse.hourly.data.length; i++) {\r\n        let apiElement = apiResponse.hourly.data[i].icon.toLowerCase();\r\n        for (let j = 0; j < dangerousWeatherArray.length; j++) {\r\n            let dangerousWeatherElement = dangerousWeatherArray[j];\r\n            if (apiElement.search(dangerousWeatherElement) != -1) {\r\n                dangerousWeatherResponse = dangerousWeatherElement;\r\n                if (dangerousWeatherResponse == \"rain\") {\r\n                    dangerousWeatherResponse = \"thunderstorms\";\r\n                }\r\n                return dangerousWeatherResponse;\r\n            }\r\n        }\r\n    }\r\n    return \"none\";\r\n}\r\n/**\r\n * @name getThreeDaysOfDarkSkyData\r\n * @summary makes 3 apis calls to dark skies, for more info\r\n * @returns a promise of a list of 3 Dark skies weather objects\r\n */\r\nasync function getThreeDaysOfDarkSkyData(city = \"Cleveland\", coordinates) {\r\n    var apiResponses = [];\r\n    let unixDay = 86400;\r\n    let currentUnixDate = Math.round((+new Date() / 1000));\r\n    let forcastDate = currentUnixDate - (unixDay * 3);\r\n    for (let i = 0; i < 3; i++) {\r\n        await getDarkSkiesApiResponse(city, forcastDate, coordinates).then(response => {\r\n            apiResponses.push(response);\r\n        });\r\n        forcastDate += unixDay;\r\n    }\r\n    return apiResponses;\r\n}\r\n/**\r\n * @name checkForBadWeatherByCity\r\n * @summary for front end use, will check for bad weather in a given city\r\n * @param city expecting a string,\r\n * @returns Promise<string> which will be a one of 5 options, hail, snow, thunderstorms, wind, none\r\n */\r\nexport async function checkForBadWeatherByCity(city) {\r\n    let apiResponses = await getThreeDaysOfDarkSkyData(city);\r\n    let dangerousWeatherResponse;\r\n    for (let i = 0; i < apiResponses.length; i++) {\r\n        dangerousWeatherResponse = parseForDangerousWeather(apiResponses[i]);\r\n        if (dangerousWeatherResponse != \"none\") {\r\n            return dangerousWeatherResponse;\r\n        }\r\n    }\r\n    return dangerousWeatherResponse;\r\n}\r\n/**\r\n * @name checkForBadWeatherByBrowser\r\n * @summary Uses browser to get location and checks for bad weather\r\n * @Returns Promise of type string and, one of 5 options, hail, snow, thunderstorms, wind, non\r\n */\r\nexport async function checkForBadWeatherByBrowser() {\r\n    let apiResponses;\r\n    let dangerousWeatherResponse;\r\n    let coordinates;\r\n    await navigator.geolocation.getCurrentPosition(function (position) {\r\n        coordinates = position.coords;\r\n    });\r\n    await getThreeDaysOfDarkSkyData(undefined, coordinates).then(response => (apiResponses = response));\r\n    for (let i = 0; i < apiResponses.length; i++) {\r\n        dangerousWeatherResponse = parseForDangerousWeather(apiResponses[i]);\r\n    }\r\n    return dangerousWeatherResponse;\r\n}\r\n"}