import { createEvent as __stencil_createEvent } from "@stencil/core";
import { getConnect as __stencil_getConnect } from "@stencil/core";
import { getContext as __stencil_getContext } from "@stencil/core";
import { getElement as __stencil_getElement } from "@stencil/core";
import { Host as __stencil_Host } from "@stencil/core";
import { h as __stencil_h } from "@stencil/core";
import { registerInstance as __stencil_registerInstance } from "@stencil/core";
import { h } from '@stencil/core';
import { config } from '../../global/config';
import { getIonMode } from '../../global/ionic-global';
import { clamp } from '../../utils/helpers';
import { createColorClasses } from '../../utils/theme';
/**
 * @virtualProp {"ios" | "md"} mode - The mode determines which platform styles to use.
 */
export class ProgressBar {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
        /**
         * The state of the progress bar, based on if the time the process takes is known or not.
         * Default options are: `"determinate"` (no animation), `"indeterminate"` (animate from left to right).
         */
        this.type = 'determinate';
        /**
         * If true, reverse the progress bar direction.
         */
        this.reversed = false;
        /**
         * The value determines how much of the active bar should display when the
         * `type` is `"determinate"`.
         * The value should be between [0, 1].
         */
        this.value = 0;
        /**
         * If the buffer and value are smaller than 1, the buffer circles will show.
         * The buffer should be between [0, 1].
         */
        this.buffer = 1;
    }
    hostData() {
        const { color, type, reversed, value } = this;
        const paused = config.getBoolean('_testing');
        const mode = getIonMode(this);
        return {
            'role': 'progressbar',
            'aria-valuenow': type === 'determinate' ? value : null,
            'aria-valuemin': 0,
            'aria-valuemax': 1,
            class: Object.assign({}, createColorClasses(color), { [mode]: true, [`progress-bar-${type}`]: true, 'progress-paused': paused, 'progress-bar-reversed': document.dir === 'rtl' ? !reversed : reversed })
        };
    }
    __stencil_render() {
        if (this.type === 'indeterminate') {
            return [
                h("div", { class: "indeterminate-bar-primary" }, h("span", { class: "progress-indeterminate" })),
                h("div", { class: "indeterminate-bar-secondary" }, h("span", { class: "progress-indeterminate" }))
            ];
        }
        const value = clamp(0, this.value, 1);
        const buffer = clamp(0, this.buffer, 1);
        return [
            h("div", { class: "progress", style: { transform: `scaleX(${value})` } }),
            buffer !== 1 && h("div", { class: "buffer-circles" }),
            h("div", { class: "progress-buffer-bar", style: { transform: `scaleX(${buffer})` } }),
        ];
    }
    render() { return __stencil_h(__stencil_Host, this.hostData(), this.__stencil_render()); }
    static get style() { return "STYLE_TEXT_PLACEHOLDER:ion-progress-bar"; }
}
