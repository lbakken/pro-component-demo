System.register(['./chunk-5603b3cb.system.js', './chunk-17730780.system.js'], function (exports) {
    'use strict';
    var registerInstance, config, getIonMode, h, Host, createColorClasses;
    return {
        setters: [function (module) {
                registerInstance = module.r;
                config = module.e;
                getIonMode = module.f;
                h = module.h;
                Host = module.H;
            }, function (module) {
                createColorClasses = module.c;
            }],
        execute: function () {
            var spinners = {
                'lines': {
                    dur: 1000,
                    lines: 12,
                    fn: function (dur, index, total) {
                        var transform = "rotate(" + (30 * index + (index < 6 ? 180 : -180)) + "deg)";
                        var animationDelay = (dur * index / total) - dur + "ms";
                        return {
                            y1: 17,
                            y2: 29,
                            style: {
                                'transform': transform,
                                'animation-delay': animationDelay,
                            }
                        };
                    }
                },
                'lines-small': {
                    dur: 1000,
                    lines: 12,
                    fn: function (dur, index, total) {
                        var transform = "rotate(" + (30 * index + (index < 6 ? 180 : -180)) + "deg)";
                        var animationDelay = (dur * index / total) - dur + "ms";
                        return {
                            y1: 12,
                            y2: 20,
                            style: {
                                'transform': transform,
                                'animation-delay': animationDelay,
                            }
                        };
                    }
                },
                'bubbles': {
                    dur: 1000,
                    circles: 9,
                    fn: function (dur, index, total) {
                        var animationDelay = (dur * index / total) - dur + "ms";
                        var angle = 2 * Math.PI * index / total;
                        return {
                            r: 5,
                            style: {
                                'top': 9 * Math.sin(angle) + "px",
                                'left': 9 * Math.cos(angle) + "px",
                                'animation-delay': animationDelay,
                            }
                        };
                    }
                },
                'circles': {
                    dur: 1000,
                    circles: 8,
                    fn: function (dur, index, total) {
                        var step = index / total;
                        var animationDelay = (dur * step) - dur + "ms";
                        var angle = 2 * Math.PI * step;
                        return {
                            r: 5,
                            style: {
                                'top': 9 * Math.sin(angle) + "px",
                                'left': 9 * Math.cos(angle) + "px",
                                'animation-delay': animationDelay,
                            }
                        };
                    }
                },
                'crescent': {
                    dur: 750,
                    circles: 1,
                    fn: function () {
                        return {
                            r: 26,
                            style: {}
                        };
                    }
                },
                'dots': {
                    dur: 750,
                    circles: 3,
                    fn: function (_, index) {
                        var animationDelay = -(110 * index) + 'ms';
                        return {
                            r: 6,
                            style: {
                                'left': 9 - (9 * index) + "px",
                                'animation-delay': animationDelay,
                            }
                        };
                    }
                }
            };
            var SPINNERS = spinners;
            var Spinner = /** @class */ (function () {
                function Spinner(hostRef) {
                    registerInstance(this, hostRef);
                    /**
                     * If `true`, the spinner's animation will be paused.
                     */
                    this.paused = false;
                }
                Spinner.prototype.getName = function () {
                    var name = this.name || config.get('spinner');
                    var mode = getIonMode(this);
                    if (name) {
                        return name;
                    }
                    return (mode === 'ios') ? 'lines' : 'crescent';
                };
                Spinner.prototype.hostData = function () {
                    var _a;
                    var mode = getIonMode(this);
                    return {
                        class: Object.assign({}, createColorClasses(this.color), (_a = {}, _a[mode] = true, _a["spinner-" + this.getName()] = true, _a['spinner-paused'] = !!this.paused || config.getBoolean('_testing'), _a))
                    };
                };
                Spinner.prototype.__stencil_render = function () {
                    var name = this.getName();
                    var spinner = SPINNERS[name] || SPINNERS['lines'];
                    var duration = (typeof this.duration === 'number' && this.duration > 10 ? this.duration : spinner.dur);
                    var svgs = [];
                    if (spinner.circles !== undefined) {
                        for (var i = 0; i < spinner.circles; i++) {
                            svgs.push(buildCircle(spinner, duration, i, spinner.circles));
                        }
                    }
                    else if (spinner.lines !== undefined) {
                        for (var i = 0; i < spinner.lines; i++) {
                            svgs.push(buildLine(spinner, duration, i, spinner.lines));
                        }
                    }
                    return svgs;
                };
                Spinner.prototype.render = function () { return h(Host, this.hostData(), this.__stencil_render()); };
                Object.defineProperty(Spinner, "style", {
                    get: function () { return "STYLE_TEXT_PLACEHOLDER:ion-spinner"; },
                    enumerable: true,
                    configurable: true
                });
                return Spinner;
            }());
            exports('ion_spinner', Spinner);
            var buildCircle = function (spinner, duration, index, total) {
                var data = spinner.fn(duration, index, total);
                data.style['animation-duration'] = duration + "ms";
                return (h("svg", { viewBox: "0 0 64 64", style: data.style }, h("circle", { transform: "translate(32,32)", r: data.r })));
            };
            var buildLine = function (spinner, duration, index, total) {
                var data = spinner.fn(duration, index, total);
                data.style['animation-duration'] = duration + "ms";
                return (h("svg", { viewBox: "0 0 64 64", style: data.style }, h("line", { transform: "translate(32,32)", y1: data.y1, y2: data.y2 })));
            };
        }
    };
});
