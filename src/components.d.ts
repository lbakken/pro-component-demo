/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface AppHome {}
  interface AppRoot {}
  interface ClaimForm {}
  interface DefaultLinks {}
  interface GeneralRedirect {}
  interface LocationCard {}
  interface OopsModal {}
  interface ProgCustQuestion {}
  interface QuoteForm {}
  interface ThanksModal {}
  interface WeatherApiComponent {
    'apiKey': string;
    'city': string;
  }
  interface WeatherCard {
    'history': string;
    'isProCust': boolean;
  }
  interface WelcomeCard {}
}

declare global {


  interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {}
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLClaimFormElement extends Components.ClaimForm, HTMLStencilElement {}
  var HTMLClaimFormElement: {
    prototype: HTMLClaimFormElement;
    new (): HTMLClaimFormElement;
  };

  interface HTMLDefaultLinksElement extends Components.DefaultLinks, HTMLStencilElement {}
  var HTMLDefaultLinksElement: {
    prototype: HTMLDefaultLinksElement;
    new (): HTMLDefaultLinksElement;
  };

  interface HTMLGeneralRedirectElement extends Components.GeneralRedirect, HTMLStencilElement {}
  var HTMLGeneralRedirectElement: {
    prototype: HTMLGeneralRedirectElement;
    new (): HTMLGeneralRedirectElement;
  };

  interface HTMLLocationCardElement extends Components.LocationCard, HTMLStencilElement {}
  var HTMLLocationCardElement: {
    prototype: HTMLLocationCardElement;
    new (): HTMLLocationCardElement;
  };

  interface HTMLOopsModalElement extends Components.OopsModal, HTMLStencilElement {}
  var HTMLOopsModalElement: {
    prototype: HTMLOopsModalElement;
    new (): HTMLOopsModalElement;
  };

  interface HTMLProgCustQuestionElement extends Components.ProgCustQuestion, HTMLStencilElement {}
  var HTMLProgCustQuestionElement: {
    prototype: HTMLProgCustQuestionElement;
    new (): HTMLProgCustQuestionElement;
  };

  interface HTMLQuoteFormElement extends Components.QuoteForm, HTMLStencilElement {}
  var HTMLQuoteFormElement: {
    prototype: HTMLQuoteFormElement;
    new (): HTMLQuoteFormElement;
  };

  interface HTMLThanksModalElement extends Components.ThanksModal, HTMLStencilElement {}
  var HTMLThanksModalElement: {
    prototype: HTMLThanksModalElement;
    new (): HTMLThanksModalElement;
  };

  interface HTMLWeatherApiComponentElement extends Components.WeatherApiComponent, HTMLStencilElement {}
  var HTMLWeatherApiComponentElement: {
    prototype: HTMLWeatherApiComponentElement;
    new (): HTMLWeatherApiComponentElement;
  };

  interface HTMLWeatherCardElement extends Components.WeatherCard, HTMLStencilElement {}
  var HTMLWeatherCardElement: {
    prototype: HTMLWeatherCardElement;
    new (): HTMLWeatherCardElement;
  };

  interface HTMLWelcomeCardElement extends Components.WelcomeCard, HTMLStencilElement {}
  var HTMLWelcomeCardElement: {
    prototype: HTMLWelcomeCardElement;
    new (): HTMLWelcomeCardElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
    'app-root': HTMLAppRootElement;
    'claim-form': HTMLClaimFormElement;
    'default-links': HTMLDefaultLinksElement;
    'general-redirect': HTMLGeneralRedirectElement;
    'location-card': HTMLLocationCardElement;
    'oops-modal': HTMLOopsModalElement;
    'prog-cust-question': HTMLProgCustQuestionElement;
    'quote-form': HTMLQuoteFormElement;
    'thanks-modal': HTMLThanksModalElement;
    'weather-api-component': HTMLWeatherApiComponentElement;
    'weather-card': HTMLWeatherCardElement;
    'welcome-card': HTMLWelcomeCardElement;
  }
}

declare namespace LocalJSX {
  interface AppHome extends JSXBase.HTMLAttributes<HTMLAppHomeElement> {}
  interface AppRoot extends JSXBase.HTMLAttributes<HTMLAppRootElement> {}
  interface ClaimForm extends JSXBase.HTMLAttributes<HTMLClaimFormElement> {
    'onCloseClaim'?: (event: CustomEvent<any>) => void;
  }
  interface DefaultLinks extends JSXBase.HTMLAttributes<HTMLDefaultLinksElement> {
    'onChangeWeather'?: (event: CustomEvent<any>) => void;
  }
  interface GeneralRedirect extends JSXBase.HTMLAttributes<HTMLGeneralRedirectElement> {}
  interface LocationCard extends JSXBase.HTMLAttributes<HTMLLocationCardElement> {
    'onLocation'?: (event: CustomEvent<any>) => void;
  }
  interface OopsModal extends JSXBase.HTMLAttributes<HTMLOopsModalElement> {
    'onCloseOops'?: (event: CustomEvent<any>) => void;
  }
  interface ProgCustQuestion extends JSXBase.HTMLAttributes<HTMLProgCustQuestionElement> {
    'onIsCustomer'?: (event: CustomEvent<any>) => void;
  }
  interface QuoteForm extends JSXBase.HTMLAttributes<HTMLQuoteFormElement> {
    'onCloseQuote'?: (event: CustomEvent<any>) => void;
  }
  interface ThanksModal extends JSXBase.HTMLAttributes<HTMLThanksModalElement> {
    'onCloseThanks'?: (event: CustomEvent<any>) => void;
  }
  interface WeatherApiComponent extends JSXBase.HTMLAttributes<HTMLWeatherApiComponentElement> {
    'apiKey'?: string;
    'city'?: string;
  }
  interface WeatherCard extends JSXBase.HTMLAttributes<HTMLWeatherCardElement> {
    'history': string;
    'isProCust'?: boolean;
    'onStyleSet'?: (event: CustomEvent<any>) => void;
    'onWeatherButtonClick'?: (event: CustomEvent<any>) => void;
  }
  interface WelcomeCard extends JSXBase.HTMLAttributes<HTMLWelcomeCardElement> {}

  interface IntrinsicElements {
    'app-home': AppHome;
    'app-root': AppRoot;
    'claim-form': ClaimForm;
    'default-links': DefaultLinks;
    'general-redirect': GeneralRedirect;
    'location-card': LocationCard;
    'oops-modal': OopsModal;
    'prog-cust-question': ProgCustQuestion;
    'quote-form': QuoteForm;
    'thanks-modal': ThanksModal;
    'weather-api-component': WeatherApiComponent;
    'weather-card': WeatherCard;
    'welcome-card': WelcomeCard;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


